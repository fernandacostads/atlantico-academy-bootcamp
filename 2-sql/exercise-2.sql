-- Exercise 2

-- Database creation

CREATE DATABASE universidade;
USE universidade;

-- Tables creation

CREATE TABLE Alunos ( 
		ID_ALUNO INTEGER AUTO_INCREMENT,
		MAT INTEGER NOT NULL,
		nome VARCHAR(35) NOT NULL,
		endereco VARCHAR(30) NOT NULL,
		cidade VARCHAR(30) NOT NULL,
		PRIMARY KEY(ID_ALUNO),
		UNIQUE(MAT)
);

CREATE TABLE Disciplinas ( 
		ID_DISC INTEGER AUTO_INCREMENT,
		COD_DISC VARCHAR(3) NOT NULL,
		nome_disc VARCHAR(40) NOT NULL,
		carga_hor INTEGER NOT NULL,
		PRIMARY KEY(ID_DISC),
		UNIQUE(COD_DISC)
);

CREATE TABLE Professores (
		ID_PROF INTEGER AUTO_INCREMENT,
		COD_PROF INTEGER NOT NULL,
		nome VARCHAR(60) NOT NULL,
		endereco VARCHAR(50) NOT NULL,
		cidade VARCHAR(50),
		PRIMARY KEY(ID_PROF),
		UNIQUE(COD_PROF)
);

CREATE TABLE Turma (
		ID_TURMA INTEGER AUTO_INCREMENT,
		COD_TURMA INTEGER,
		COD_DISC VARCHAR(10),
		COD_PROF INTEGER,
		ANO INTEGER,
		horario VARCHAR(30),
		PRIMARY KEY (ID_TURMA),
		FOREIGN KEY (COD_DISC) REFERENCES Disciplinas(COD_DISC),
		FOREIGN KEY (COD_PROF) REFERENCES Professores(COD_PROF)
);

CREATE TABLE Historico (
		ID_HIST INTEGER AUTO_INCREMENT,
		MAT INTEGER NOT NULL,
		COD_TURMA INTEGER NOT NULL,
		ID_TURMA INTEGER,
		COD_DISC VARCHAR(3) NOT NULL,
		COD_PROF INTEGER NOT NULL,
		ANO INTEGER NOT NULL,
		frequencia INTEGER,
		nota DECIMAL(4,2),
		PRIMARY KEY(ID_HIST),
		FOREIGN KEY(MAT) REFERENCES Alunos(MAT),
		FOREIGN KEY(COD_DISC) REFERENCES Disciplinas(COD_DISC),
		FOREIGN KEY(COD_PROF) REFERENCES Professores(COD_PROF),
		FOREIGN KEY(ID_TURMA) REFERENCES Turma(ID_TURMA)
);

-- Populating database

INSERT INTO Alunos (MAT, nome, endereco, cidade)
VALUES (2015010101, 'JOSÉ DE ALENCAR', 'RUA DAS ALMAS', 'NATAL'),
		(2015010102, 'JOÃO JOSÉ', 'AVENIDA RUY CARNEIRO', 'JOÃO PESSOA'),
		(2015010103, 'MARIA JOAQUINA', 'RUA CARROSSEL' , 'RECIFE'),
		(2015010104, 'MARIA DAS DORES', 'RUA DAS LADEIRAS', 'FORTALEZA'),
		(2015010105, 'JOSUÉ CLAUDINO DOS SANTOS', 'CENTRO', 'NATAL'),
		(2015010106, 'JOSUÉ LISSON CLAUDINO DOS SANTOS', 'CENTRO', 'NATAL');
        
INSERT INTO Disciplinas (COD_DISC, nome_disc, carga_hor)
VALUES ('BD', 'BANCO DE DADOS', 100),
		('POO',' PROGRAMAÇÃO COM ACESSO A BANCO DE DADOS', 100),
		('WEB', 'AUTORIA WEB', 50),
		('ENG', 'ENGENHARIA DE SOFTWARE', 80);

INSERT INTO Professores (COD_PROF, nome, endereco, cidade)
VALUES (212131, 'NICKERSON FERREIRA',' RUA MANAÍRA', 'JOÃO PESSOA'),
		(122135, 'ADORILSON BEZERRA', 'AVENIDA SALGADO FILHO',' NATAL'),
		(192011, 'DIEGO OLIVEIRA', 'AVENIDA ROBERTO FREIRE', 'NATAL');

INSERT INTO Turma (COD_DISC, COD_TURMA, COD_PROF, ANO, horario)
VALUES ('BD', 1, 212131, 2015, '11H-12H'),
    ('BD', 2, 212131, 2015, '13H-14H'),
    ('POO', 1, 192011, 2015, '08H-09H'),
    ('WEB', 1, 192011, 2015, '07H-08H'),
    ('ENG', 1, 122135, 2015, '10H-11H');

INSERT INTO Historico (MAT, COD_DISC, COD_TURMA, COD_PROF, ANO, frequencia, nota)
VALUES (2015010101, 'BD', 1, 212131, 2022, 80, 9),
		(2015010101, 'POO', 1, 192011, 2015, 90, 10),
		(2015010102, 'BD', 2, 122135, 2015, 76, 2),
		(2015010102, 'POO', 2, 122135, 2015, 64, 5),
		(2015010103, 'WEB', 2, 212131, 2019, 70, 7),
		(2015010103, 'BD', 2, 122135, 2015, 89, 3),
		(2015010104, 'WEB', 2, 192011, 2013, 90, 8  ),
		(2015010104, 'POO', 1, 212131, 2012, 85, 7 ),
		(2015010105, 'WEB', 2, 192011, 2011, 70, 1 ),
		(2015010105, 'ENG', 1, 122135, 2010, 80, 0  ),
		(2015010106,'ENG', 2, 122135, 2009, 100, 9 ),
		(2015010106,'POO', 1,192011, 2015, 90, 10),
		(2015010106,'POO', 1,192011, 2015, 90, 8);


-- Query a) Encontre a MAT dos alunos com nota em BD em 2015 menor que 5 (obs: BD = código da disciplinas).

SELECT MAT
FROM Historico
WHERE COD_DISC = 'BD' AND NOTA < 5;

-- Query b) Encontre a MAT e calcule a média das notas dos alunos na disciplina de POO em 2015
	
SELECT MAT, AVG(nota) AS media
FROM Historico
WHERE COD_DISC = 'POO' AND ANO = 2015
GROUP BY MAT;

-- Query c) Encontre a MAT e calcule a média das notas dos alunos na disciplina de POO em 2015 e que esta média seja superior a 6.

SELECT Alunos.MAT, AVG(nota) AS media
FROM Alunos JOIN Historico ON Historico.MAT = Alunos.MAT
WHERE Historico.COD_DISC = 'POO' AND ANO = 2015
GROUP BY Alunos.MAT
HAVING media > 6;

-- Query d) Encontre quantos alunos não são de Natal.

SELECT COUNT(nome)
FROM Alunos
WHERE cidade != 'NATAL';